?collapse::`%!in%`
# any in ====
Rcpp::cppFunction(
"
bool rcpp_any_nin(CharacterVector indx, CharacterVector nms) {
R_xlen_t n = indx.length();
for(R_xlen_t i = 0; i < n; ++i) {
if(!(indx[i] in nms)) return true;
}
return false;
}
"
)
n <- 1e6
indx <- sample(letters, n, TRUE)
nms <- sample(letters, n, TRUE)
n <- 1e6
indx <- sample(letters, n, TRUE)
nms <- sample(letters, n, TRUE)
bench::mark(
collapse::`%iin%`(indx, nms)
any(indx %in% nms),
bench::mark(
collapse::`%iin%`(indx, nms),
any(indx %in% nms),
min_iterations = 10000
)
?bench::mark
# any (not)in ====
Rcpp::cppFunction(
"
bool rcpp_any_nin(CharacterVector indx, CharacterVector nms) {
R_xlen_t n = indx.length();
for(R_xlen_t i = 0; i < n; ++i) {
if(any(!indx[i] in nms)) return true;
}
return false;
}
"
)
x <- 1:10
x[11]
x <- as.matrix(1:10)
x[11,]
?order
order(1:10, 1:5)
?sort
?collapse::BY.default
?apply
?order
order(sample(1:10), method = c("auto", "shell", "radix"))
order(sample(1:10), method = c("auto"))
x <- sample(1:10)
order(x, method = c("auto"))
orderx, method = c("auto", "shell", "radix"))
order(x, method = c("auto", "shell", "radix"))
x <- matrix(sample(1:25), ncol = 5)
x <- matrix(sample(1:25), ncol = 5)
expect_equal(
idx_ord_v(x, 1 i_na.last, j_decr, k_method),
#' Compute Ordered Indices
#'
#' @description
#' Computes ordered indices.
#' Similar to \link[base]{order},
#' except the user must supply a vector,
#' a list of equal-length vectors,
#' a data.frame or a matrix (row-wise and column-wise are both supported),
#' as the input. \cr
#' \cr
#' For a vector `x`,
#' `idx_ord_v(x)` is equivalent to \link[base]{order}\code{(x)}. \cr
#' \cr
#' For a data.frame or a list of equal-length vectors `x`, with `p` columns/elements,
#' `idx_ord_df(x)` is equivalent to `order(x[[1]], ..., x[[p]])`. \cr
#' \cr
#' For a matrix (or array) `x` with `p` rows,
#' `idx_ord_m(x, margin = 1)` is equivalent to `order(x[1, ], ..., x[p, ], ...)`. \cr
#' \cr
#' For a matrix (or array) `x` with `p` columns,
#' `idx_ord_m(x, margin = 2)` is equivalent to `order(x[, 1], ..., x[, p], ...)`. \cr
#' \cr
#' Note that these are merely a convenience functions,
#' and that these are actually slightly slower than \link[base]{order} (except for `idx_ord_v()`),
#' due to the additional functionality.
#'
#'
#' @param x a vector, data.frame, or array
#' @param margin the margin over which to cut the matrix/array into vectors. \cr
#' I.e. `margin = 1` will cut `x` into individual rows,
#' and apply the \link[base]{order} on those rows. \cr
#' And `margin = 2` will cut `x` into columns, etc.
#' @param lst a list or data.frame.
#' @param na.last,decreasing,method see \link[base]{order} and \link[base]{sort}.
#'
#'
#' @returns
#' See \link[base]{order}.
#'
#'
#'
#' @examples
#'
#' # vectors ====
#' x <- sample(1:10)
#' order(x)
#' idx_ord_v(x)
#' idx_ord_m(rbind(x,x), 1)
#' idx_ord_m(cbind(x,x), 2)
#' idx_ord_df(data.frame(x,x))
#'
#' @rdname idx_ord
#' @export
idx_ord_v <- function(x, na.last = TRUE, decreasing = FALSE,
method = c("auto", "shell", "radix")) {
return(order(
x, na.last = na.last, decreasing = decreasing, method = method
))
}
#' @rdname idx_ord
#' @export
idx_ord_m <- function(x, margin, na.last = TRUE, decreasing = FALSE,
method = c("auto", "shell", "radix")) {
x <- apply(x, margin, \(x) x, simplify = FALSE)
return(do.call(order, c(x, ...)))
}
#' @rdname idx_ord
#' @export
idx_ord_df <- function(x, na.last = TRUE, decreasing = FALSE,
method = c("auto", "shell", "radix")) {
if(!is.list(x)) {
stop("`x` must be a data.frame or list")
}
return(do.call(order, c(x, ...)))
}
x <- sample(1:10)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
)
library(tinytest)
x <- sample(1:10)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
)
j_decr = FALSE
k_method = "auto"
i_na.last = TRUE
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
)
x <- matrix(sample(1:25), ncol = 5)
expect_equal(
idx_ord_v(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], na.last = i_na.last, decreasing = j_decr, method = k_method)
)
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], na.last = i_na.last, decreasing = j_decr, method = k_method)
)
#' Compute Ordered Indices
#'
#' @description
#' Computes ordered indices.
#' Similar to \link[base]{order},
#' except the user must supply a vector,
#' a list of equal-length vectors,
#' a data.frame or a matrix (row-wise and column-wise are both supported),
#' as the input. \cr
#' \cr
#' For a vector `x`,
#' `idx_ord_v(x)` is equivalent to \link[base]{order}\code{(x)}. \cr
#' \cr
#' For a data.frame or a list of equal-length vectors `x`, with `p` columns/elements,
#' `idx_ord_df(x)` is equivalent to `order(x[[1]], ..., x[[p]])`. \cr
#' \cr
#' For a matrix (or array) `x` with `p` rows,
#' `idx_ord_m(x, margin = 1)` is equivalent to `order(x[1, ], ..., x[p, ], ...)`. \cr
#' \cr
#' For a matrix (or array) `x` with `p` columns,
#' `idx_ord_m(x, margin = 2)` is equivalent to `order(x[, 1], ..., x[, p], ...)`. \cr
#' \cr
#' Note that these are merely a convenience functions,
#' and that these are actually slightly slower than \link[base]{order} (except for `idx_ord_v()`),
#' due to the additional functionality.
#'
#'
#' @param x a vector, data.frame, or array
#' @param margin the margin over which to cut the matrix/array into vectors. \cr
#' I.e. `margin = 1` will cut `x` into individual rows,
#' and apply the \link[base]{order} on those rows. \cr
#' And `margin = 2` will cut `x` into columns, etc.
#' @param lst a list or data.frame.
#' @param decr see argument `decreasing` in \link[base]{order}
#' @param na.last,method see \link[base]{order} and \link[base]{sort}.
#'
#'
#' @returns
#' See \link[base]{order}.
#'
#'
#'
#' @examples
#'
#' # vectors ====
#' x <- sample(1:10)
#' order(x)
#' idx_ord_v(x)
#' idx_ord_m(rbind(x,x), 1)
#' idx_ord_m(cbind(x,x), 2)
#' idx_ord_df(data.frame(x,x))
#'
#' @rdname idx_ord
#' @export
idx_ord_v <- function(x, na.last = TRUE, decr = FALSE,
method = c("auto", "shell", "radix")) {
return(order(
x, na.last = na.last, decreasing = decreasing, method = method
))
}
#' @rdname idx_ord
#' @export
idx_ord_m <- function(x, margin, na.last = TRUE, decr = FALSE,
method = c("auto", "shell", "radix")) {
x <- apply(x, margin, \(x) x, simplify = FALSE)
args <- list(na.last = na.last, decreasing = decr, method = method)
return(do.call(order, c(x, args)))
}
#' @rdname idx_ord
#' @export
idx_ord_df <- function(x, na.last = TRUE, decr = FALSE,
method = c("auto", "shell", "radix")) {
if(!is.list(x)) {
stop("`x` must be a data.frame or list")
}
args <- list(na.last = na.last, decreasing = decr, method = method)
return(do.call(order, c(x, args)))
}
x <- matrix(sample(1:25), ncol = 5)
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], na.last = i_na.last, decreasing = j_decr, method = k_method)
)
x <- sample(1:10)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
)
#' @rdname idx_ord
#' @export
idx_ord_v <- function(x, na.last = TRUE, decr = FALSE,
method = c("auto", "shell", "radix")) {
return(order(
x, na.last = na.last, decreasing = decr, method = method
))
}
x <- sample(1:10)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
)
setwd("D:/D Desktop/Publications/R package subsets/subsets/inst/tinytest")
source(file.path(getwd(), "source", "functions4testing.R"))
samples <- list(
rep(c(TRUE, FALSE), 10),
as.integer(1:10),
as.double(1:10),
letters,
as.factor(letters)
)
samples <- list(
rep(c(TRUE, FALSE), 10),
as.integer(1:10),
as.double(1:10),
letters,
as.factor(letters)
)
samples <- list(
rep(c(TRUE, FALSE), 10),
as.integer(1:10),
as.double(1:10),
letters,
as.factor(letters)
)
?sample
samples <- list(
rep(c(TRUE, FALSE), 25),
as.integer(1:25),
as.double(1:25),
letters,
as.factor(letters)
)
l_sample = 1
x <- sample(samples[[l_sample]], size = 25)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- as.matrix(x)
x <- sample(samples[[l_sample]], size = 25)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- matrix(x, ncol = 5)
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- as.data.frame(x)
expect_equal(
idx_ord_df(x, 1, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_df(x, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
enumerate <- 0
samples <- list(
rep(c(TRUE, FALSE), 25),
as.integer(1:25),
as.double(1:25),
letters,
as.factor(letters)
)
for(i_na.last in c(TRUE, FALSE)) {
for(j_decr in c(TRUE, FALSE)) {
for(k_method in c("auto", "shell", "radix")) {
for(l_sample in 1:length(samples)) {
for(m_rep in 1:10) {
x <- sample(samples[[l_sample]], size = 25)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- matrix(x, ncol = 5)
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 2, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- as.data.frame(x)
expect_equal(
idx_ord_df(x, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
enumerate <- enumerate + 3
}
}
}
}
}
rlang::global_entrace()
for(i_na.last in c(TRUE, FALSE)) {
for(j_decr in c(TRUE, FALSE)) {
for(k_method in c("auto", "shell", "radix")) {
for(l_sample in 1:length(samples)) {
for(m_rep in 1:10) {
x <- sample(samples[[l_sample]], size = 25)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- matrix(x, ncol = 5)
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 2, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- as.data.frame(x)
expect_equal(
idx_ord_df(x, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
enumerate <- enumerate + 3
}
}
}
}
}
rlang::last_trace()
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], x[5,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 2, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[5,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 2, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[, 5], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- as.data.frame(x)
expect_equal(
idx_ord_df(x, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[, 5], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
enumerate <- 0
samples <- list(
rep(c(TRUE, FALSE), 25),
as.integer(1:25),
as.double(1:25),
letters,
as.factor(letters)
)
for(i_na.last in c(TRUE, FALSE)) {
for(j_decr in c(TRUE, FALSE)) {
for(k_method in c("auto", "shell", "radix")) {
for(l_sample in 1:length(samples)) {
for(m_rep in 1:10) {
x <- sample(samples[[l_sample]], size = 25)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- matrix(x, ncol = 5)
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], x[5,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 2, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[, 5], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- as.data.frame(x)
expect_equal(
idx_ord_df(x, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[, 5], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
enumerate <- enumerate + 3
}
}
}
}
}
enumerate <- 0
for(i in 1:10) {
r <- sample(1:20)
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(head, r, grp) |> as.integer(),
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.integer()
) |> errorfun()
r <- sample(letters[1:20])
expect_equal(
idx_by(head, r, grp) |> as.character(),
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.character()
) |> errorfun()
enumerate <- enumerate + 2
}
