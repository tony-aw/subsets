% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_set.R
\name{sb_set}
\alias{sb_set}
\alias{sb_set.default}
\alias{sb_set.matrix}
\alias{sb_set.array}
\alias{sb_set.list}
\alias{sb_set.data.frame}
\title{Method to Modify Subsets of an Object By Reference}
\usage{
sb_set(x, ...)

\method{sb_set}{default}(x, i, ..., rp, tf)

\method{sb_set}{matrix}(x, row = NULL, col = NULL, i = NULL, ..., rp, tf)

\method{sb_set}{array}(x, idx = NULL, dims = NULL, rcl = NULL, i = NULL, ..., rp, tf)

\method{sb_set}{list}(x, i, ..., rp, tf)

\method{sb_set}{data.frame}(x, row = NULL, col = NULL, filter = NULL, vars = NULL, ..., rp, tf)
}
\arguments{
\item{x}{see \link{subsets_classes}.}

\item{...}{further arguments passed to or from other methods.}

\item{i, row, col, idx, dims, rcl, filter, vars}{See \link{subsets_indx_args}. \cr
An empty index selection returns the original object unchanged. \cr}

\item{rp}{an object of somewhat the same type as the selected subset of \code{x},
and the same same length as the selected subset of \code{x} or a length of 1.}

\item{tf}{the transformation function.}
}
\value{
Returns: VOID. This method modifies the object by REFERENCE. \cr
Do NOT use assignment like \code{x <- sb_set(x, ...)}. \cr
Since this function returns void, you'll just get NULL. \cr
}
\description{
This is an S3 Method to replace or transform a subset of an object BY REFERENCE. \cr
}
\details{
\bold{Transform or Replace} \cr
Specifying argument \code{tf} will transform the subset.
Specifying \code{rp} will replace the subset.
One cannot specify both \code{tf} and \code{rp}. It's either one set or the other. \cr
Note that there is not \code{sb_set()} method for factors: this is intentional. \cr
\cr
}
\section{Warning}{

Due to the way replacement or transformation by reference works,
types (see \link[base]{typeof}) CANNOT be coerced to another type.
Thus, for example, the following code:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{x <- 1:16
sb_set(x, i = 1:8, rp = 8.5)
x
}\if{html}{\out{</div>}}

gives \verb{c(rep(8, 8) 9:16)} instead of \code{c(rep(8.5, 8), 9:16)},
because \code{x} is of type \code{integer}, so \code{rp} is interpreted as type \code{integer} also. \cr
}

\examples{

gen_mat <- function() {
  obj <- matrix(1:16, ncol = 4)
  colnames(obj) <- c("a", "b", "c", "a")
  return(obj)
}
# vector-like objects ====
obj <- obj2 <- gen_mat()
obj
sb_set(obj, 1:3, 1:3, rp = -1:-9)
obj2
obj <- obj2 <- gen_mat()
obj
sb_set(obj, i = \(x)x<=5, rp = -1:-5)
obj2
obj <- obj2 <- gen_mat()
obj
sb_set(obj, col = "a", rp = cbind(-1:-4, -5:-8))
obj2

obj <- obj2 <- gen_mat()
obj
sb_set(obj, 1:3, 1:3, tf = \(x) -x)
obj2
obj <- obj2 <- gen_mat()
obj
sb_set(obj, i = \(x)x<=5, tf = \(x) -x)
obj2
obj <- obj2 <- gen_mat()
obj
sb_set(obj, col = "a", tf = \(x) -x)
obj2


gen_array <- function() {
  array(1:64, c(4,4,3))
}
obj <- gen_array()
obj
sb_set(obj, list(1:3, 1:2, c(1, 3)), 1:3, rp = -1:-12)
obj
obj <- gen_array()
obj
sb_set(obj, i = \(x)x<=5, rp = -1:-5)
obj



}
