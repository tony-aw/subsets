% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_mod.R
\name{sb_mod}
\alias{sb_mod}
\alias{sb_mod.default}
\alias{sb_mod.list}
\alias{sb_mod.factor}
\alias{sb_mod.matrix}
\alias{sb_mod.array}
\alias{sb_mod.data.frame}
\title{Method to Return a Copy of an Object With Modified Subsets}
\usage{
sb_mod(x, ...)

\method{sb_mod}{default}(x, i, ..., rp, tf)

\method{sb_mod}{list}(x, i, ..., rp, tf)

\method{sb_mod}{factor}(x, i = NULL, lvl = NULL, ..., rp)

\method{sb_mod}{matrix}(x, row = NULL, col = NULL, i = NULL, ..., rp, tf)

\method{sb_mod}{array}(x, idx = NULL, dims = NULL, i = NULL, ..., rp, tf)

\method{sb_mod}{data.frame}(x, row = NULL, col = NULL, filter = NULL, vars = NULL, ..., rp, tf)
}
\arguments{
\item{x}{a vector, vector-like object, factor, data.frame, data.frame-like object, or a list.}

\item{...}{further arguments passed to or from other methods.}

\item{i, lvl, row, col, idx, dims, filter, vars}{See \link{subsets_indx_args}. \cr
An empty index selection returns the original object unchanged. \cr}

\item{rp}{an object of somewhat the same type as the selected subset of \code{x},
and the same same length as the selected subset of \code{x} or a length of 1.}

\item{tf}{the transformation function.}
}
\value{
A copy of the object with replaced/transformed values.
}
\description{
This is an S3 Method to return a copy of an object with modified subsets.
}
\details{
\bold{Transform or Replace} \cr
Specifying argument \code{tf} will transform the subset. \cr
Specifying \code{rp} will replace the subset. \cr
One cannot specify both \code{tf} and \code{rp}. It's either one set or the other. \cr
Note that the \code{tf} argument is not available for factors: this is intentional. \cr
}
\examples{

# vector-like objects ====
obj <- matrix(1:16, ncol = 4)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
sb_mod(obj, 1:3, 1:3, rp = -1:-9)
# above is equivalent to  obj[1:3, 1:3] <- -1:-9; obj
sb_mod(obj, i = \(x)x<=5, rp = -1:-5)
# above is equivalent to  obj[obj <= 5] <- -1:-5; obj
sb_mod(obj, col = "a", rp = -1:-8)
# above is equivalent to  obj[, which(colnames(obj) \%in\% "a")] <- -1:-8; obj

obj <- matrix(1:16, ncol = 4)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
sb_mod(obj, 1:3, 1:3, tf = \(x) -x)
# above is equivalent to  obj[1:3, 1:3] <- -1 * obj[1:3, 1:3]
sb_mod(obj, i = \(x)x<=5, tf = \(x) -x)
# above is equivalent to  obj[obj <= 5] <- -1:-5; obj
sb_mod(obj, col = "a", tf = \(x) -x)
# above is equivalent to  obj[, which(colnames(obj) \%in\% "a")] <- -1:-8; obj


obj <- array(1:64, c(4,4,3))
print(obj)
sb_mod(obj, list(1:3, 1:2, c(1, 3)), 1:3, rp = -1:-12)
# above is equivalent to obj[1:3, 1:2, c(1, 3)] <- -1:-12
sb_mod(obj, i = \(x)x<=5, rp = -1:-5)
# above is equivalent to obj[obj <= 5] <- -1:-5


# lists ====
obj <- list(a = 1:10, b = letters[1:11], c = 11:20)
print(obj)
sb_mod(obj, "a", rp = list(1))
# above is equivalent to  obj[["a"]] <- 1; obj
sb_mod(obj, is.numeric, rp = list(-1:-10, -11:-20))
# above is equivalent to  obj[which(sapply(obj, is.numeric))] <- list(-1:-10, -11:-20); obj


# data.frame-like objects ====
obj <- data.frame(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
print(obj)
sb_mod(obj, vars = is.numeric, rp = data.frame(-1:-10))




}
