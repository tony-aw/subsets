% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_x.R
\name{sb_x}
\alias{sb_x}
\alias{sb_x.default}
\alias{sb_x.factor}
\alias{sb_x.list}
\alias{sb_x.matrix}
\alias{sb_x.array}
\alias{sb_x.data.frame}
\title{Method to extract, exchange, or duplicate indices of an object}
\usage{
sb_x(x, ...)

\method{sb_x}{default}(x, i, ...)

\method{sb_x}{factor}(x, i = NULL, lvl = NULL, drop = FALSE, ...)

\method{sb_x}{list}(x, i, drop = FALSE, ...)

\method{sb_x}{matrix}(x, row = NULL, col = NULL, i = NULL, ...)

\method{sb_x}{array}(x, idx = NULL, dims = NULL, i = NULL, ...)

\method{sb_x}{data.frame}(x, row = NULL, col = NULL, filter = NULL, vars = NULL, ...)
}
\arguments{
\item{x}{a vector, vector-like object, factor, data.frame, data.frame-like object, or a list.}

\item{...}{further arguments passed to or from other methods.}

\item{i}{\code{sb_x(x, i = i)} corresponds to \code{x[i]}. \cr
Any of the following can be given here:
\itemize{
\item \code{NULL}, only for multi-dimensional objects or factors.
\code{NULL} results in the entire object being returned.
\item a vector of length 0, in which case an empty object of length 0 is returned.
\item a strictly positive integer vector with indices
(duplicates are allowed, resulting in duplicated indices).
\item logical vector (without \code{NA}s) of the same length as \code{x}
giving the indices to extract.
\item a character vector of index names
(duplicates are allowed, resulting in duplicated indices).
If an object has multiple indices with the specified name,
all the corresponding indices will be extracted/exchanged/duplicated.
\item function that returns a logical vector giving the element indices to select.
}}

\item{lvl}{names of the levels of \code{x},
for which the corresponding indices are to be extracted, exchanged, or duplicated. \cr
Duplicates are allowed, resulting in duplicated indices.}

\item{drop}{logical.
\itemize{
\item For factors: If \code{TRUE}, unused levels are dropped, if \code{FALSE} they are not dropped.
\item For lists: is \code{TRUE}, selecting a single element will give the simplified result,
like using \verb{[[]]}. If \code{FALSE}, a list is always returned regardless of the number of elements.
}}

\item{row, col}{\code{sb(x, row, col)} corresponds to \code{x[row, col, drop = FALSE]}. \cr
Thus \code{row} = rows, \code{col} = columns. \cr
Any of the following can be given here:
\itemize{
\item \code{NULL} (default), which results in ALL the indices of this dimension being selected,
and the entire object is returned.
\item a vector of length 0, in which case an empty object is returned.
\item a strictly positive integer vector with dimension indices
(duplicates are allowed, resulting in duplicated indices).
\item logical vector (without \code{NA}s) of the same length as the corresponding dimension size,
giving the indices of this dimension to extract.
\item a character vector of index names
(duplicates are allowed, resulting in duplicated indices).
If an object has multiple indices with the given name,
all the corresponding indices will be extracted/exchanged/duplicated.
}

NOTE: The arguments \code{row} and \code{col} will be ignored if \code{i} is specified.}

\item{idx, dims}{arguments to subset arrays:
\itemize{
\item \code{idx}: a list of indices.
\item \code{dims}: a integer vector of the same length as \code{idx},
giving the dimensions to which the indices given in \code{idx} correspond to.
}

The elements of \code{idx} follow the same rules as the rules for \code{row} and \code{col},
EXCEPT one should not fill in \code{NULL}. \cr
Thus \code{sb_rm(x, list(1:10, 1:4), c(1, 3))} is equivalent to \code{x[1:10, , 1:4, drop = FALSE]}. \cr
NOTE: The arguments \code{idx} and \code{dims} will be ignored if \code{i} is specified.}

\item{filter}{a one-sided formula with a single logical expression using the column names of the data.frame,
giving the condition which observations (rows) should be extracted. \cr
For example: \cr
to select rows for which column \code{a > 2} and for which column \code{b != "a"},
specify the following formula: \cr
\code{~ (a > 2) & (b != "a")}}

\item{vars}{a function, giving the condition which variables (columns) should be extracted.}
}
\value{
A copy of the sub-setted object.
}
\description{
This is an S3 Method to extract, exchange, or duplicate indices of an object.
}
\details{
One cannot specify \code{i} and \code{row}/\code{col}/\code{lvl}/\code{idx}/\code{dims} simultaneously.
It's either \code{i}, or the other arguments. \cr
\cr
One cannot specify \code{row} and \code{filter} simultaneously.
It's either one or the other. Similarly,
one cannot specify \code{col} and \code{vars} simultaneously. \cr
\cr
In the above cases it holds that if one set is specified, the other is set is ignored.
}
\examples{

# vector-like objects ====
obj <- matrix(1:16, ncol = 4)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
sb_x(obj, 1:3, 1:3)
# above is equivalent to obj[1:3, 1:3, drop = FALSE]
sb_x(obj, i = \(x)x>5)
# above is equivalent to obj[obj > 5]
sb_x(obj, col = c("a", "a"))
# above is equivalent to obj[, lapply(c("a", "a"), \(i) which(colnames(obj) == i)) |> unlist()]

obj <- array(1:64, c(4,4,3))
print(obj)
sb_x(obj, list(1:3, 1:2, c(1, 3)), 1:3)
# above is equivalent to obj[1:3, 1:2, c(1, 3), drop = FALSE]
sb_x(obj, i = \(x)x>5)
# above is equivalent to obj[obj > 5]


# lists ====
obj <- list(a = 1:10, b = letters[1:11], c = 11:20)
print(obj)
sb_x(obj, 1) # obj[1]
sb_x(obj, 1, drop = TRUE) # obj[[1]]
sb_x(obj, 1:2) # obj[1:2]
sb_x(obj, is.numeric) # obj[sapply(obj, is.numeric)]
# for recusive indexing, see sb_rec()


# factors ====
obj <- factor(rep(letters[1:5], 2))
sb_x(obj, lvl = c("a", "a"))
# above is equivalent to obj[lapply(c("a", "a"), \(i) which(obj == i)) |> unlist()]


# data.frame-like objects ====
obj <- data.frame(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
print(obj)
sb_x(obj, 1:3, 1:3) # obj[1:3, 1:3, drop = FALSE]
sb_x(obj, filter = ~ (a > 5) & (c < 19), vars = is.numeric)


}
