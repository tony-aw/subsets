x <- 1:1e5
value <- 1e5
anysmaller(x, value)
x <- 1e5:1
value <- 1e5
x <- 1:1e5
value <- 1e5
anysmaller(x, value)
rbenchmark::benchmark(
any(x < value),
anysmaller(x, value), # WAAAAAY faster
replications = 1e5
)
x <- 1e5:1
value <- 1e5
anysmaller(x, value)
rbenchmark::benchmark(
any(x < value),
anygreater(x, value), # WAAAAAY faster
replications = 1e5
)
x <- 1e5:1
value <- 1e5
anysmaller(x, value)
rbenchmark::benchmark(
any(x < value),
anysmaller(x, value), # WAAAAAY faster
replications = 1e5
)
Rcpp::cppFunction(
"
bool anyNA(IntegerVector indx, int value) {
int n = indx.size();
for(int i = 0; i < n; ++i) {
if(is_na(indx[i])) return true;
}
return false;
}
"
)
# Remove package ====
remove.packages("subsets")
remotes::install_github("https://github.com/tony-aw/subsets")
# Preview documentation ====
library(subsets)
?subsets::subsets_help
?subsets::sb_x()
?subsets::sb_rm()
?data.table::copy
install.packages("tracemem")
library(subsets)
x <- matrix(1:10, ncol=2)
tracemem(x)
sb_x(x, 1:10)
sb_x(x, 1:5)
sb_x(x, 1:4)
library(magrittr)
x %<>% sb(1:4)
x %<>% sb_x(1:4)
tracemem(x)
x <- sb_x(x, 1:4)
tracemem(x)
?replace\
?replace
?`[<-`
x <- matrix(1:10, ncol = 2)
x
names(x) <- c("a", "b")
x
attr(x, "test") <- "test"
x
x[,1]
x[,1:2]
x[1:2,1:2]
x[1:2,1:2, drop = FALSE]
?collapse::ss
ss(x, 1:2, 1:2)
collapse::ss(x, 1:2, 1:2)
x
?collapse::setattrib()
?collapse::get_vars
?collapse::get_elem
?ts
? `[.ts`
x <- 1:10
names(x) <- letters[1:10]
attr(x, "test") <- "test"
x
x[1]
collapse::get_elem(x, 1)
?collapse::get_elem(x, 1)
collapse::atomic_elem(x, 1)
?`[<-.ts`
??`[<-.ts`
.subset2
?.subset2
x <- 1:10
names(x) <- letters[1:10]
attr(x, "test") <- "test"
x
.subset(x, 1:5)
.subset2(x, 1:5)
sys.call()
foo <- sys.call()
foo\
foo
?`[<-`
?subsets::subsets_help
?subsets::subsets_indx_args
tidytable::mutate
library(data.table)
`[.data.table`
?`[.data.table`
?`[<-.data.table`
seq(from = 1:10)
seq(from = 1:10, by = 1, length.out = 10)
seq_len(1:10)
Rcpp::cppFunction(
"
List rcpp_seq_lengths(IntegerVector lengths) {
int n = lengths.size();
List out(n);
for(int i = 0; i < n; ++i) {
out[i] = Rcpp::seq_len(lengths[i]);;
}
return out;
}
"
)
rcpp_seq_lengths(1:10)
rcpp_seq_lengths(1:10)
rbenchmark::benchmark(
rcpp_seq_lengths(c(1e6, 1000, 10, 4)),
lapply(c(1e6, 1000, 10, 4), seq_len),
replications = 1e5
)
rbenchmark::benchmark(
rcpp_seq_lengths(c(1e6, 1000, 10, 4)),
lapply(c(1e6, 1000, 10, 4), seq_len),
replications = 1000
)
rbenchmark::benchmark(
rcpp_seq_lengths(c(1e6, 1000, 10, 4)),
lapply(c(1e6, 1000, 10, 4), seq_len),
replications = 10000
)
Rcpp::cppFunction(
"
List rcpp_seq_multi(IntegerVector startpoints, IntegerVector endpoints) {
int n = startpoints.size();
List out(n);
for(int i = 0; i < n; ++i) {
IntegerVector temp = seq(startpoints[i], endpoints[i]);
out[i] = temp;
}
return out;
}
"
)
rcpp_seq_multi(c(1, 2, 4), c(4, 5, 6))
mapply(seq, from = c(1, 2, 4), to = c(4, 5, 6))
rbenchmark::benchmark(
rcpp_seq_multi(c(1, 1, 1), c(40, 500, 6000)),
mapply(seq.int, from = c(1, 1, 1), to = c(40, 500, 6000), SIMPLIFY = FALSE),
replications = 1e5
)
(10:100)^2
rcpp_seq_multi(c(1, 2, 4), c(4, 5, 6))
mapply(seq, from = c(1, 2, 4), to = c(4, 5, 6))
rbenchmark::benchmark(
rcpp_seq_multi(10:100, (10:100)^2),
mapply(seq.int, from = 10:100, to = (10:100)^2, SIMPLIFY = FALSE),
replications = 1e5
)
rbenchmark::benchmark(
"rcpp" = rcpp_seq_multi(10:100, (10:100)^2),
"mapply" = mapply(seq.int, from = 10:100, to = (10:100)^2, SIMPLIFY = FALSE), # faster than rcpp!
replications = 1e5
)
rcpp_seq_multi(c(1, 2, 4), c(4, 5, 6))
mapply(seq, from = c(1, 2, 4), to = c(4, 5, 6))
ind <- 10:100
rbenchmark::benchmark(
"rcpp" = rcpp_seq_multi(as.integer(ind), as.integer((ind)^2)),
"mapply" = mapply(seq.int, from = ind, to = (ind)^2, SIMPLIFY = FALSE), # faster than rcpp!
replications = 1e5
)
install.packages("pkgsearch")
pkgsearch::cran_new(from = "last-month")
foo <- pkgsearch::cran_new(from = "last-month")
View(foo)
?.Alias
x <- 1:1-
x <- 1:10
x2 <- x
collapse::setv(x, 11, -11, vind1 = FALSE)
x
x2
collapse::setv(x, 11, -11, vind1 = TRUE)
names(x) <- lettters[1:10]
names(x) <- letters[1:10]
c(x, 11)
x2 <- c(x, 11)
names(x2)
?data.table::set
library(data.table)
x <- data.table(a = 1:10, b = letters[1:10])
x
x2 <- x
x2
set(x, j = 3, value = 11:20)
set(x, j = "c", value = 11:20)
x
x2
append
install.packages("miscTools")
miscTools::insertRow
x <- as.list(1:10)
x <- as.list(1:10)
names(x) <- letters[1:10]
x
x[["a"]]
x$a
x$k <- -1
x
x[["l"]] <- -1
x
x <- 1:10
x
names(x) <- letters[1:10]
x
x[["a"]]
x[["k"]]
x[["k"]] <- -1
x
x
tracemem(x)
x[["l"]] <- -2
tracemem(x)
x[["l"]] <- -1:-10
x[[13]] <- -3
x
?collapse::setv
x[[15]] <- -1
x
tracemem(x)
?tracemem
x
x <- 1:10 # just an example
x[[11]] <- 20
x
x <- matrix(1:10, ncol=2)
x
length(x)
x[[11]] <- 20
z
x
x <- matrix(1:10, ncol=2)
x[11]
x[11] <- 20
z
x
x <- 1:10
x[11]
x[11] <- 20
x
x
x[11:20] <- 1:20
x[11:20] <- 1:10
x
tracemem(x)
x[21:30] <- -1:-10
x
x <- as.list(1:10)
tracemem(x)
x[[11]] <- -1
tracemem(x)
x <- as.list(1:10)
tracemem(x)
x[[11]] <- -1
retracemem(x)
x <- 1:10 |> matrix()
x[1:10, ]
x <- matrix(1:10, ncol=2)
x[1:5,]
x[1:5,]
x[1:6,]
x
x <- 1:10
x
x[[10]] <- NULL
x[10] <- NULL
x <- as.list(1:10)
x
data.table::set(x, 1, value = 2)
data.table::set(x, j = 1, value = 2)
data.table::CJ
expand.grid
??vec_expand_grid
x <- list(1, 1.0, "a")
collapse::vtypes(x)
x <- list(1L, 1.0, "a")
collapse::vtypes(x)
x <- list(1:10, 1.0, "a")
x
collapse::vtypes(x)
collapse::setv(x, 1, mean, vind1=TRUE, xlist = TRUE)
collapse::setv(x, 1, list(mean(1:10)), vind1=TRUE, xlist = TRUE)
x
collapse::vtypes(x)
x
`[<-`
x <- 1:10
x
`[<-`(x, 1, -1)
x
`[<-`(x, 2, -1)
`[<-`(x, 1:2, -1)
x <- 1:8
x[1]
x[1] <- 1.5
x
library(data.table)
x <- data.table(1:10, letters[1:10])
set(x, j = 1, 1.5)
set(x, j = 1, value = 1.5)
x <- list(1:10, "a")
x
collapse::setv(x, 1, list(1L), vind1 = TRUE, xlist = TRUE)
x
x
x
rm(list="x")
x <- list(1:10, "a")
collapse::setv(x, 1, list(1:10), vind1 = TRUE, xlist = TRUE)
x
x
x <- 1:10
tracemem(x)
x\
x
x[1] <- -1
x
is.integer(x)
x <- 1:10
is.integer(x)
x[1] <- -1L
x
library(data.table)
x <- data.table(a = 1:10, b = letters[1:10])
set(x, 1:5, 1, as.character(1:5))
x
set(x, 1:10, 1, as.character(1:10))
x
set(x, j = 1, value = as.character(1:10))
x
x[[1]][1:5] <- as.character(1:5)
x
x[[1]][1:5] <- letters[1:5]
x
x <- data.table(a = 1:10, b = letters[1:10])
x
x2 <- x
x[[1]][1:5] <- letters[1:5]
x2
?collapse::ftransformv()
NULL[1]
NULL[[1]]
NULL[]
NULL[[NULL]]
NULL[[integer(0)]]
character(10)[NULL]
character(10)[[NULL]]
character(10)[[1]]
character(10)[[integer(0)]]
sourceCpp("Search.cpp")
Rcpp::sourceCpp("Search.cpp")
library(spam64)
library(spam)
library(spam64)
?`[.spam`
`[.spam`
?spam
nz <- 128
ln <- nz^2
smat <- spam(0,ln,ln)
smat
methods("[")
methods("[", 'spam')
? `[,spam,matrix,missing,missing-method`
? `[,spam,matrix,missing,missing-method`
`[,spam,matrix,missing,missing-method`
?signature
signature(x = 'spam', i, j)
signature(x = 'spam', 1, 1)
signature(x = "spam", 1, 1)
signature(x = "spam", i=1, j=1)
rlang::is_formula()
rlang::is_formula
foo <- x ~ y
foo[[1]]
foo <- ~ y
foo[[1]]
as.character(~ y)
foo
foo <- x ~ y
as.list(foo)
foo <- ~ y
as.list(foo)
foo[[2]]
foo[[2]] |> as.character()
terms(foo)
x <- ~ mass
y <- ~ height
color <- ~ sex
lst <- list(x, y, color)
is_formula <- function(x) inherits(x, "formula") && is.call(x) && x[[1]] == quote(`~`)
check <- vapply(lst, is_formula, logical(1))
args.names <- ifelse(names(lst)=="", "", paste0(names(lst), " = "))
args.values <- vapply(lst, \(x)as.character(x)[2], character(1))
args <- paste0(args.names, args.values, collapse = ", ")
#' @rdname aes_pro
#' @export
aes_pro <- function(...) {
lst <- list(...)
is_formula <- function(x) inherits(x, "formula") && is.call(x) && x[[1]] == quote(`~`)
check <- vapply(lst, is_formula, logical(1))
if(any(!check)) {
stop("formula inputs must be given")
}
args.names <- ifelse(names(lst)=="", "", paste0(names(lst), " = "))
args.values <- vapply(lst, \(x)as.character(x)[2], character(1))
args <- paste0(args.names, args.values, collapse = ", ")
txt <- paste0("ggplot2::aes(", args, ")")
message(txt)
eval(parse(text=txt), envir = parent.frame(n = 1))
}
data("starwars", package = "dplyr")
x <- ~ mass
y <- ~ height
color <- ~ sex
ggplot2::ggplot(starwars, aes_pro(x, y, color = color)) +
ggplot2::geom_point()
data("starwars", package = "dplyr")
x <- ~ sqrt(mass)
y <- ~ height
color <- ~ sex
ggplot2::ggplot(starwars, aes_pro(x, y, color = color)) +
ggplot2::geom_point()
matrix
array
matrix
remotes::install_github("https://github.com/tony-aw/tinycodet")
# open documentation ====
library(tinycodet)
# overview pages:
?tinycodet
data.table::replace_dot_alias
data.table:::replace_dot_alias
rlang::eval_tidy
?substitute
substitute(list(1,2), list(.=list))
eval(substitute(list(1,2), list(.=list)))
x <- .(1,2)
?l
??l
raw(2)
x <- as.raw(40)
x
?type.convert
tinycodet::transform_if
whichna
whichNA
??whichNA
?type.convert()
type.convert
utils::type.convert.default
getwd()
setwd("D:/D Desktop/Publications/R package subsets/subsets/vignettes/articles")
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(subsets)
# Chunk 3
library(bench)
library(ggplot2)
library(patchwork)
# Chunk 4
plotfun <- function(p1, p2) {
combined <- p1 + p2 & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
}
summary(bm.matrix, relative = TRUE)
load("bm.matrix.RData")
summary(bm.matrix, relative = TRUE)
tinycodet::import_as(~ dt., "data.table") # import 'data.table' as dt.
tinycodet::import_as(~ clp., "collapse") # import 'collapse' as clp.
nc_shapefile <- system.file("shape/nc.shp", package = "sf")
nc <- sf::st_read(nc_shapefile)
nc <- dt.$as.data.table(nc)
nc$region <- ifelse(nc$CNTY_ID<=1980, 'high', 'low')
plotdat <- nc[,
.(geometry = sf::st_union(geometry)),
by = .(region = ifelse(CNTY_ID<=1980, 'high', 'low'))]
sessionInfo()
testdat <- nc[,
lapply(.SD, sf::st_union), .SDcols = "geometry",
by = .(region = ifelse(CNTY_ID<=1980, 'high', 'low'))]
plotdat==testdat
